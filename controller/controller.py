from PySide import QtCore, QtGui

class ControllerBase(QtGui.QWidget):
    @classmethod
    def bindUI(cls, uiKls):
        '''
        uiKls: It's uaually in ui.ui_xxxx which generated by xxx.ui
        '''
        def inner(contollerKls):
            if not issubclass(contollerKls, cls):
                print("Error %s is not instance of %s" % (contollerKls, cls))
                return contollerKls

            contollerKls._UIKls = uiKls
            return contollerKls
        return inner

    def __init__(self, parent = None, main = None):
        QtGui.QWidget.__init__(self, parent)
        if not getattr(self, "_UIKls", None):
            print "Warning undefined UIKls"
        else:
            self.ui = self._UIKls()
            self.ui.setupUi(self)

        if not main:
            print "Warning undefined MainWindow"
        self._mainWindow = main

    def logStatus(self, info):
        if not self._mainWindow:
            print info
        else:
            print self._mainWindow.statusBar().showMessage(info)

    def getAgentController(self):
        return self._mainWindow.getAgentController()

    def getMainWindow(self):
        return self._mainWindow

class _AnalyzerControllerBase(ControllerBase):
    @classmethod
    def bindAnalyzer(cls, analyzerName):
        '''
        analyzerName: It can be getted from core.C88xxAnalyzerBase.list_analyzer()
        '''
        def inner(contollerKls):
            if not issubclass(contollerKls, cls):
                print("Error %s is not instance of %s" % (contollerKls, cls))
                return contollerKls

            contollerKls._AnalyzerName = analyzerName
            return contollerKls
        return inner

    def setAnalyzer(self, analyzer):
        self.analyzer = analyzer

class OfflineAnalyzerControllerBase(_AnalyzerControllerBase):
    def __init__(self, **kw):
        ControllerBase.__init__(self, **kw)
        agentCtl = self.getAgentController()

        if getattr(self, "_AnalyzerName", None):
            self.setAnalyzer(agentCtl.genOfflineAnalyzer(self._AnalyzerName))
        else:
            print "Warning cls %s not bind Analyzer" % (type(self))

class OnlineAnalyzerControllerBase(_AnalyzerControllerBase):
    def __init__(self, **kw):
        ControllerBase.__init__(self, **kw)
        agentCtl = self.getAgentController()

        if getattr(self, "_AnalyzerName", None):
            self.setAnalyzer(agentCtl.getAnalyzer(self._AnalyzerName))
        else:
            print "Warning cls %s not bind Analyzer" % (type(self))

        agentCtl.agentStateChange.connect(self.on_agentStateChange)

    def _setControllerEnabled(self, enable):
        '''
        On default: Enable/Disable whole QWidget
        It can be overrided by subclass
        '''
        self.setEnabled(enable)

    def on_agentStateChange(self, state):
        agentCtl = self.getAgentController()
        enable = state == agentCtl.agentAvailable
        self._setControllerEnabled(enable)
